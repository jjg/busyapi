When		Step		Action	Notes
5/11/2018	1		Fork the example repository �busyapi� - https://github.com/jjg/busyapi	
				fork: https://github.com/tankersleyj/busyapi
		2		Modify the example with a goal of making the call POST /api/usages scale to 1M users per minute	
		3		Keep a log of your work as you tackle the problem. Return this log, along with a link to your fork of the repository to the people on this email (reply-all)	
		4		As well as your code changes, you may wish to include:	
		A		Suggested changes to the software architecture/stack that may achieve the goal	
				A. Process requests concurrently (and increase Sockets or disable Socket Pooling) and consider faster stack 
(Raygun found ASP.NET 2,000% faster than Node JS, https://raygun.com/blog/increased-throughput-net-core/)
		B		Suggested changes to the physical architecture/hardware that may achieve the goal	
				B. Use faster hardware (CPU, Memory, Bandwidth) and/or use multi-instance web farm to handle requests concurrently
		C		A working build of the code capable of achieving the goal	
				C. Hmmm, next step might be to reach out for sage advice...
		D		Methods of measuring whether or not the goal has been achieved	
				D. Create test that fires 1M "POSTS" per minute (assuming each user only sends one post per minute)
			
5/11/2018	Download	Fork repository and install locally	
		Review		Walk through (test) steps in README.md	Visual Studio Code & GitHub Desktop
		Test		curl test	
			
5/14/2018	Research	Research node API load test options (node packages, test frameworks or custom test code)	
				Reference: https://www.npmjs.com/package/loadtest
		Install		Selected and installed node package "loadtest"	
				$ npm install loadtest
		Test		Test loadtest, returning errors on every call	
				$ loadtest -n 1000000 -t 60 -c 8 -H "Content-Type: application/json" --data '{"patientId":"100","timestamp":"Tue Nov 01 2016 09:11:51 GMT-0500 (CDT)","medication":"Albuterol"}' http://localhost:3000/api/usages
		Research	curl load test	http://servermonitoringhq.com/blog/how_to_quickly_stress_test_a_web_server
		Test		Test curl with 10,000 calls (as single * 10k or 5 * 2k with " & " commands and "time" to bench mark)	
				time curl -s -X POST -H "Content-Type: application/json" --data '{"patientId":"100","timestamp":"Tue Nov 01 2016 09:11:51 GMT-0500 (CDT)","medication":"Albuterol"}' http://localhost:3000/api/usages?[1-10000] 
		Bench mark 1	10,000 calls in ~32 seconds or approx 20,000 calls per minute (10k * 60/32)	
				"Local Hardware:  i5-4258U CPU at 2.4 GHz with 8GB RAM
OS: Windows 10 Home"
		Research	Attempt to run API code asynchronously with "async" command	
		Bench mark 2	10,000 calls in ~32 seconds or approx 20,000 calls per minute (10k * 60/32)	
				No performance improvement
		Test		Attempt to reduce console.log output to determine impact on performance	
		Bench mark 3	10,000 calls in ~32 seconds or approx 20,000 calls per minute (10k * 60/32)	
				No performance improvement
			
		Research	ASP.NET reported to be 2000% faster for API calls for at least one user	
				Raygun found ASP.NET 2,000% faster than Node JS, https://raygun.com/blog/increased-throughput-net-core/
		Install		Install Visual Studio Community 2017	
		Build		Build "ASP.NET Core Web Application" > Web API	
		Test		10,000 calls in ~45 seconds or approx 15,000 calls per minute (10k * 60/45)	
				time curl -s -X POST -H "Content-Type: application/json" --data '{}' http://localhost:64866/api/values?[1-10000] 

Suggestions:
	A. Process requests concurrently (and increase Sockets or disable Socket Pooling) and consider faster stack 
(Raygun found ASP.NET 2,000% faster than Node JS, https://raygun.com/blog/increased-throughput-net-core/)

	B. Use faster hardware (CPU, Memory, Bandwidth) and/or use multi-instance web farm to handle requests concurrently

	C. Hmmm, next step might be to reach out for sage advice...


